#include <stdio.h>
#define N 7


void funcPrintQuadArray (const int Array[N][N]){
	for (int i = 0, ii = 0; i<N; i++){
		for (ii = 0; ii<N; ii++){
			printf ("%d\t", Array[i][ii]);
		}
		printf ("\n");
	}
}

void funcFillingTriangle (int Array[N][N]){
	for (int i = 0, ii = 0; i < N; i++){
		for (ii = 0; ii < N; ii++){
			//Если столбец меньше (N - сдвиг номера строки), то заполняем 0
			if (ii < (N - i) ) {
				Array[i][ii] = 0;
			}
			else {
				Array[i][ii] = 1;
			}
		}
	}
}

void funcPrintArrayInReverse (const int Array[N]){
	for (int i = N - 1; i >= 0; i--){
		printf ("%d ", *(Array + i));
	}
	printf ("\n");
}

void funcFillingSnail (int Snail[N][N]){
	int num = 1;
	for (int begin = 0, end = N - 1, i = 0, c_i = 0; num < N*N;){
		for (i = begin, c_i = begin; i <= end; i++){
			Snail[c_i][i] = num++;
		}
		for (c_i = end, i = begin + 1; i <= end; i++){
			Snail[i][c_i] = num++;
		}
		end--;
		for (c_i = end + 1, i = end; i >= begin; i--){
			Snail[c_i][i] = num++;
		}
		begin++;
		for (c_i = begin - 1, i = end; i >= begin; i--){
			Snail[i][c_i] = num++;
		}
	}
		//Добавляем последний элемент в центр нечетной матрицы
	if ( N&0x1 == 1){
		Snail[N>>1][N>>1] = num;
	}
}

int main(void) {
	int QuadArray [N][N] = {0};
	int Array [N] = {0};
	for (int i=0; i < N; i++){
		Array[i] = i+1;
	}

	funcFillingTriangle(QuadArray);

	funcPrintQuadArray(QuadArray);
	
	funcFillingSnail(QuadArray);

	funcPrintQuadArray(QuadArray);

	funcPrintArrayInReverse(Array);

	getchar();
	return 0;
}
